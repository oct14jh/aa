package concepts;

public class Sort3_Insertion {
	Sort3_Insertion() {};
	Sort3_Insertion(int arr[]){
		for(int i=0;i<arr.length-1;i++) {
			for(int j=i; arr[j]>arr[j+1];j--) {
				if(arr[j] > arr[j+1]) {
					Sort_Main.swap(arr, j, j+1);
				}
				if(j<=0)
					break;
			}
		}
	}
}

/*
삽입정렬 : O(N^2) // 값을 적절한 위치로 삽입시켜주는 알고리즘으로, 해당 요소의 바로 앞 요소만 비교를하여 작으면 swap하고 swap된 그자리에서 바로 앞요소만 또 비교 하는 그런 알고리즘.
 1) 하나를 선택 (큰반복문) [이 때, 큰반복문에서의 조건을 잘 고려해야함... 작은반복문 참고]
 2) 선택된 인덱스부터 비교를 하되 선택된 인덱스의 바로 뒤(j+1) 인덱스 이런식으로 비교를 하여 j-- 해주는 반복문 형태다.
 3) j<=0 시엔 반복문을 종료한다는 것도 잘 고려해야함 [오류 방지.. j--할때 -1인덱스로 갈 수 있으므로]
 
 - 정렬된 경우에는 선택&버블정렬보다 훨 나은 알고리즘 (이유:앞의 값보다 큰 값이라하면 바로 종료됨 + 앞의 값보다 앞에 위치한 값들은 이미 정렬된 형태이므로)
*/
